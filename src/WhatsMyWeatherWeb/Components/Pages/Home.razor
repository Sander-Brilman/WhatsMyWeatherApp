@page "/"
@rendermode InteractiveServer

@using WhatsMyWeatherWeb.Components.Shared
@using WhatsMyWeatherWeb.Data.GetWeatherHelperServiceModels;
@using WhatsMyWeatherWeb.Services;
@using System.ComponentModel.DataAnnotations;

@inject HttpClient http;
@inject IJSRuntime js;
@inject WeatherService weatherHelper;
@inject LocationService locationService;


<SearchEngineMetaTags Lang="@Lang"></SearchEngineMetaTags>


@if (error is not null)
{
    <div role="alert">
        @error
    </div>
}

<h1>@(Lang == "nl" ? "Wat wordt het weer?" : "What's my weather?")</h1>


<EditForm Model="location" OnSubmit="FetchWeather" >


    <div class="input-container">

        <div class="searchbar">
            <input placeholder="Geef toegang tot je locatie of vul zelf een plaats in" @bind="location.LocationText" type="text" autocomplete="address-level2">
            <button class="search" type="submit" title="Get weather from location"><i class="fa-solid fa-magnifying-glass"></i></button>
            <button @onclick="FetchWeather" class="reset" type="button" title="reset location"><i class="fa-regular fa-arrow-rotate-left"></i></button>
        </div>
                    
        @if (weatherResult is not null)
        {
            <div class="full-location">@fullLocationTitle</div>
            <p class="time">@(selectedTime.Hour < 10 ? $"0{selectedTime.Hour}" : selectedTime.Hour):@(selectedTime.Minute < 10 ? $"0{selectedTime.Minute}" : selectedTime.Minute)</p>
            <div class="slider">
                <DaytimeSlider SunriseStart="weatherResult.SunriseStart"
                                SunriseDuration="weatherResult.SunriseDuration"
                                SunsetStart="weatherResult.SunsetStart"
                                SunsetDuration="weatherResult.SunsetDuration"
                                CurrentTime="weatherResult.LocalTime"
                                OnTimeSelect="SetSelectedWeather" />
            </div>
            <div class="slider-ticks">
                <time style="left: 0%;">00</time>
                <time style="left: 8.3%;">02</time>
                <time style="left: 16.6%;">04</time>
                <time style="left: 24.9%;">06</time>
                <time style="left: 33.2%;">08</time>
                <time style="left: 41.5%;">10</time>
                <time style="left: 49.8%;">12</time>
                <time style="left: 58.1%;">14</time>
                <time style="left: 66.4%;">16</time>
                <time style="left: 74.7%;">18</time>
                <time style="left: 83%;">20</time>
                <time style="left: 91.3%;">22</time>
                <time style="left: 100%;">23</time>
            </div>
        }

    </div>
</EditForm>
    
    
@if (displayedWeatherState is not null)
{
    <div class="weatherStatus">
        <h3>[ @displayedWeatherState.Status ]</h3>
        <div>
            <p>@displayedWeatherState.AverageTempInCelcius <span class="celcius">°C</span></p>
            <p>@displayedWeatherState.PrecipitationInMM <span class="rain">mm</span></p>
        </div>
    </div>
}


@code {

    [Parameter, SupplyParameterFromQuery(Name = "lang")]
    public string? Lang { get; set; }

    class InputLocation
    {
        [Required(ErrorMessage = "Je moet dit wel invullen hè!")]
        public string LocationText { get; set; } = "";
    }

    InputLocation location = new();

    string fullLocationTitle = "";

    string? error;


    WeatherState? displayedWeatherState;
    WeatherResult? weatherResult;

    DateTimeOffset selectedTime;
    int currentHour;

    bool weatherShouldRender = true;

    protected override void OnInitialized()
    {
        Lang ??= "nl";
    }


    /// <summary>
    /// Gets called by the DayTimeSlider component as a callback
    /// </summary>
    /// <param name="selectedTimeOfDay">the selected time of the day</param>
    /// <returns></returns>
    async Task SetSelectedWeather(DateTimeOffset selectedTimeOfDay)
    {
        if (weatherResult is null)
        {
            return;
        }

        selectedTime = selectedTimeOfDay;
        currentHour = selectedTimeOfDay.Hour;


        WeatherState selectedWeatherState = weatherResult.HourlyWeather[currentHour];

        bool reRenderBackgroundWeather = true;//weatherShouldRender || displayedWeatherState is null || selectedWeatherState.Status != displayedWeatherState.Status;

        displayedWeatherState = selectedWeatherState;

        if (reRenderBackgroundWeather)
        {
            await SetBackgroundWeather();
            weatherShouldRender = false;
        }

        StateHasChanged();
    }

    /// <summary>
    /// Fetch weather result from service and d
    /// </summary>
    /// <returns></returns>
    async Task FetchWeather()
    {
        weatherShouldRender = true;

        if (location.LocationText.Trim().Length == 0) {
            LocationResult result = await locationService.GetLocationFromBrowser();
            location.LocationText = $"{result.Latitude} {result.Longitude}";
        }
        
        try
        {   
            weatherResult = await weatherHelper.GetWeatherStatusForLocationAsync(location.LocationText, Lang!);

            if (weatherResult is null) {
                error = "Kan het weer niet ophalen voor deze locatie!";
                return;
            }

            selectedTime = weatherResult.LocalTime;
            currentHour = weatherResult.LocalTime.Hour;

            fullLocationTitle = weatherResult.Location;

            displayedWeatherState = weatherResult.CurrentWeather;
            await SetBackgroundWeather();

            error = null;
        }
        catch (Exception ex)
        {
            error = "Er is iets mis gegaan bij het ophalen van het weer!";
            #if DEBUG
                error += " => " + ex.Message;
            #endif
        }

        StateHasChanged();
    }
        
    public async Task SetBackgroundWeather()
    {
        if (displayedWeatherState is null) {
            return;
        }
            
        await js.InvokeVoidAsync("setBackgroundWeather", displayedWeatherState.WeatherGenerationOptions);
    }

    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {// automatically start requesting the location once the page is loaded
        
            await FetchWeather();
        }
    }
}