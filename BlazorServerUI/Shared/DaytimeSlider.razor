<input style="--slider-background: @GenerateCSSGradient();" type="range" min="0" max="23" value="@CurrentHour" @onchange="HandleChange" />




@code {
    [Parameter, EditorRequired]
    public int CurrentHour { get; set; }

    [Parameter, EditorRequired]
    public Func<int, Task> OnChange { get; set; }



    [Parameter, EditorRequired]
    public DateTimeOffset SunriseStart { get; set; }

    [Parameter, EditorRequired]
    public TimeSpan SunriseDuration { get; set; }



    [Parameter, EditorRequired]
    public DateTimeOffset SunsetStart { get; set; }

    [Parameter, EditorRequired]
    public TimeSpan SunsetDuration { get; set; }



    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    async Task HandleChange(ChangeEventArgs changeEventArgs)
    {
        if (int.TryParse((string)changeEventArgs.Value, out int selected) is false)
        {
            return;
        }

        await OnChange(selected);
    }



    string GenerateCSSGradient()
    {
        const int transitionSpacePerSectionPercentage = 5;
        const int totalSpaceNeededByTransitionPercentage = 4 * transitionSpacePerSectionPercentage;
        const int aviliblePercentagesForSecions = 100 - totalSpaceNeededByTransitionPercentage;



        int calculateRelativePercentageOfDay(TimeSpan current)
        {
            const int totalMinutesInADay = 24 * 60;

            return (int)Math.Round(100 * current.TotalMinutes / totalMinutesInADay);
        }


        int convertToAbsolutePercentage(int relativePercentage)
        {
            return relativePercentage * aviliblePercentagesForSecions / 100;
        }


        DateTimeOffset startOfDay = new(SunriseStart.Date, SunriseStart.Offset);


        // 
        // calculate percentages per section. most of the variables can be directly used in method calls but are here for readability
        //
        // RelativePercentage is how much % of the available space reserved for the secions it will use
        //
        // AbsolutePercentage is how much % of the total space within the slider it will use.
        //


        TimeSpan firstNightPartDuration = SunriseStart - startOfDay;
        int firstNightPartRelativePercentage = calculateRelativePercentageOfDay(firstNightPartDuration);
        int firstNightPartAbsolutePercentage = convertToAbsolutePercentage(firstNightPartRelativePercentage);


        TimeSpan sunriseDuration = SunriseDuration;
        int sunriseRelativePercentage = calculateRelativePercentageOfDay(sunriseDuration);
        int sunriseAbsolutePercentage = convertToAbsolutePercentage(sunriseRelativePercentage);


        // calculate daylight time
        TimeSpan daylightDuration = SunsetStart - SunriseStart.Add(SunriseDuration);
        int daylightRelativePercentage = calculateRelativePercentageOfDay(daylightDuration);
        int daylightAbsolutePercentage = convertToAbsolutePercentage(daylightRelativePercentage);


        TimeSpan sunsetDuration = SunsetDuration;
        int sunsetRelativePercentage = calculateRelativePercentageOfDay(sunsetDuration);
        int sunsetAbsolutePercentage = convertToAbsolutePercentage(sunsetRelativePercentage);


        int lastNightPartRelativePercentage = 100 - (firstNightPartRelativePercentage + sunriseRelativePercentage + daylightRelativePercentage + sunsetRelativePercentage);
        int lastNightPartAbsolutePercentage = convertToAbsolutePercentage(lastNightPartRelativePercentage);


        //
        // construct the linear gradient
        //

        List<KeyValuePair<string, int>> rgbColorSections = new()
        {
            new("rgba(0,0,0,1)", firstNightPartAbsolutePercentage),
            new("rgba(255,128,0,1)", sunriseAbsolutePercentage),
            new("rgba(0,224,255,1)", daylightAbsolutePercentage),
            new("rgba(255,128,0,1)", sunsetAbsolutePercentage),
            new("rgba(0,0,0,1)", lastNightPartAbsolutePercentage),
        };

        string finalLinearGradient = "linear-gradient(90deg,";
        int count = 1;
        int percentageAccumulation = 0;

        foreach (var colorSection in rgbColorSections)
        {
            // start of the section
            finalLinearGradient += $"{colorSection.Key} {percentageAccumulation}%,";

            // add size of the section
            percentageAccumulation += colorSection.Value;

            // end of the section
            finalLinearGradient += $"{colorSection.Key} {percentageAccumulation}%";

            // add spacing for next section
            percentageAccumulation += transitionSpacePerSectionPercentage;

            // add comma if needed
            if (rgbColorSections.Count != count)
            {
                finalLinearGradient += ",";
            }

            count++;
        }

        // add end bracket
        finalLinearGradient += ")";

        return finalLinearGradient;







        //
        // enter first-class spaggeti 🍝, bon appetit
        //

    //     return $@"linear-gradient(90deg,
    // {/* nacht 21 */""}      rgba(0,0,0,1)   {firstNightPartAbsolutePercentage}%,
                            
    // {/* sunrise start */""} rgba(255,128,0,1) {firstNightPartAbsolutePercentage + transitionSpacePerSectionPercentage}%,
    // {/* sunrise start */""} rgba(255,128,0,1) {firstNightPartAbsolutePercentage + transitionSpacePerSectionPercentage + sunriseAbsolutePercentage}%,
                            
    // {/* day start */""}     rgba(0,224,255,1) {firstNightPartAbsolutePercentage + transitionSpacePerSectionPercentage + sunriseAbsolutePercentage + transitionSpacePerSectionPercentage}%,
    // {/* day end */""}       rgba(0,224,255,1) {}%,
                            
    // {/* sunset start */""}  rgba(255,128,0,1) {}%,
    // {/* sunset end */""}    rgba(255,128,0,1) {}%,
                            
    // {/* nacht */""}         rgba(0,0,0,1) {}%
    //     );
    //     ";
    }

}
