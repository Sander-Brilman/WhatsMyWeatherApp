@page "/" @using BlazorServerUI.Data.GetWeatherHelperServiceModels; @using BlazorServerUI.Services; @using System.ComponentModel.DataAnnotations;
@inject HttpClient http; @inject IJSRuntime js; @inject GetWeatherHelper weatherHelper  @if (error is not null) {     <div role="alert">         @error     </div> }  <h1>Wat is mijn weer?</h1>   <EditForm Model="location" OnValidSubmit="FetchWeather" >
    <div class="input-container">
        <div>
            <input placeholder="Geef toegang tot je locatie of vul zelf een plaats in" @bind="location.Location" type="text" autocomplete="address-level2">             <button class="search" type="submit" title="Get weather from location"><i class="fa-solid fa-magnifying-glass"></i></button>             <button @onclick="GetLocationFromBrowser" class="reset" type="button" title="reset location"><i class="fa-regular fa-arrow-rotate-left"></i></button>         </div>
        @if (resultFromApi is not null)
        {
            <div>
                @fullLocationTitle
            </div>
            <div>

                    <DaytimeSlider SunriseStart="resultFromApi.SunriseStart"
                                    SunriseDuration="resultFromApi.SunriseDuration"
                                    SunsetStart="resultFromApi.SunsetStart"
                                    SunsetDuration="resultFromApi.SunsetDuration"
                                    CurrentTime="resultFromApi.LocalTime"
                                    OnTimeSelect="SetSelectedWeather" />
            </div>
        }
    </div> </EditForm>   @if (displayedWeatherState is not null)
{
    <div class="weatherStatus">
        <h3>[ @displayedWeatherState.Status ]</h3>
        <div>
            <p>@displayedWeatherState.AverageTempInCelcius <span class="celcius">°C</span></p>
            <p>@displayedWeatherState.PrecipitationInMM <span class="rain">mm</span></p>
        </div>
    </div>
}   @code {

    class InputLocation
    {
        [Required(ErrorMessage = "Je moet dit wel invullen hè!")]
        public string Location { get; set; } = "";
    }

    InputLocation location = new();

    string fullLocationTitle;

    string? error;


    WeatherState? displayedWeatherState;
    WeatherResult? resultFromApi;

    int currentHour;

    bool weatherShouldRender = true;

    async Task SetSelectedWeather(DateTimeOffset selectedTimeOfDay)
    {
        if (resultFromApi is null)
        {
            return;
        }

        currentHour = selectedTimeOfDay.Hour;


        WeatherState selectedWeatherState = resultFromApi.HourlyWeather[currentHour];

        selectedWeatherState.WeatherGenerationOptions.BackgroundCssClass = selectedTimeOfDay.GetTimeOfDay(
            resultFromApi.SunriseStart,
            resultFromApi.SunsetStart,
            resultFromApi.SunriseDuration,
            resultFromApi.SunsetDuration
        ).ToCssClass();

        bool reRenderBackgroundWeather = true;// weatherShouldRender || displayedWeatherState is null || selectedWeatherState.Status != displayedWeatherState.Status;

        displayedWeatherState = selectedWeatherState;

        if (reRenderBackgroundWeather)
        {
            await SetBackgroundWeather();
            weatherShouldRender = false;
        }

        StateHasChanged();
    }

    /// <summary>
    /// Fetch weather result from service and d
    /// </summary>
    /// <returns></returns>
    async Task FetchWeather()     {
        weatherShouldRender = true;

        if (location.Location == "") {
            await GetLocationFromBrowser();
            return;
        }          try         {
            resultFromApi = await weatherHelper.GetWeatherStatusForLocationAsync(location.Location);

            if (resultFromApi is null)
            {
                error = "Kan het weer niet ophalen voor deze locatie!";
                return;
            }

            currentHour = resultFromApi.LocalTime.Hour;

            fullLocationTitle = resultFromApi.Location;

            displayedWeatherState = resultFromApi.CurrentWeather;
            await SetBackgroundWeather();

            error = null;
        }         catch (Exception ex)         {             error = "Er is iets mis gegaan bij het ophalen van het weer!";              #if DEBUG         error += " => " + ex.Message;             #endif         }         // to do     }        //     // getting location from browser functions     //          public async Task SetBackgroundWeather()     {         if (displayedWeatherState is null) {
            return;         }          await js.InvokeVoidAsync("setBackgroundWeather", displayedWeatherState.WeatherGenerationOptions);     }      [JSInvokable]     public void GetLocationErrorCallback()     {         error = "Er ging iets mis bij het automatish invullen van je locatie, zorg dat je toestemming geeft voor locatie gebruik of vul zelf een plaats in";          StateHasChanged();     }      [JSInvokable]     public async Task GetLocationCallback(object latitude, object longitude)     {         location.Location = $"{latitude}, {longitude}";         await FetchWeather();         StateHasChanged();     }      async Task GetLocationFromBrowser() {
        DateTimeOffset currentTime = DateTimeOffset.Now.ToOffset(TimeSpan.FromHours(2));

        await js.InvokeVoidAsync("getLocation", DotNetObjectReference.Create(this));
    }      protected override async Task OnAfterRenderAsync(bool firstRender)     {
        if (firstRender is false)
        {
            return;
        }

        await GetLocationFromBrowser();
    } }